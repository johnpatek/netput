// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: netput.proto

#include "netput.pb.h"
#include "netput.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace netput {
namespace internal {

static const char* Netput_method_names[] = {
  "/netput.internal.Netput/Connect",
  "/netput.internal.Netput/Disconnect",
  "/netput.internal.Netput/Event",
};

std::unique_ptr< Netput::Stub> Netput::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Netput::Stub> stub(new Netput::Stub(channel, options));
  return stub;
}

Netput::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Connect_(Netput_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disconnect_(Netput_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Event_(Netput_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Netput::Stub::Connect(::grpc::ClientContext* context, const ::netput::internal::ConnectRequest& request, ::netput::internal::ConnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::netput::internal::ConnectRequest, ::netput::internal::ConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void Netput::Stub::async::Connect(::grpc::ClientContext* context, const ::netput::internal::ConnectRequest* request, ::netput::internal::ConnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::netput::internal::ConnectRequest, ::netput::internal::ConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void Netput::Stub::async::Connect(::grpc::ClientContext* context, const ::netput::internal::ConnectRequest* request, ::netput::internal::ConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::netput::internal::ConnectResponse>* Netput::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::netput::internal::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::netput::internal::ConnectResponse, ::netput::internal::ConnectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Connect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::netput::internal::ConnectResponse>* Netput::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::netput::internal::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Netput::Stub::Disconnect(::grpc::ClientContext* context, const ::netput::internal::DisconnectRequest& request, ::netput::internal::DisconnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::netput::internal::DisconnectRequest, ::netput::internal::DisconnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disconnect_, context, request, response);
}

void Netput::Stub::async::Disconnect(::grpc::ClientContext* context, const ::netput::internal::DisconnectRequest* request, ::netput::internal::DisconnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::netput::internal::DisconnectRequest, ::netput::internal::DisconnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, std::move(f));
}

void Netput::Stub::async::Disconnect(::grpc::ClientContext* context, const ::netput::internal::DisconnectRequest* request, ::netput::internal::DisconnectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::netput::internal::DisconnectResponse>* Netput::Stub::PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::netput::internal::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::netput::internal::DisconnectResponse, ::netput::internal::DisconnectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disconnect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::netput::internal::DisconnectResponse>* Netput::Stub::AsyncDisconnectRaw(::grpc::ClientContext* context, const ::netput::internal::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisconnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Netput::Stub::Event(::grpc::ClientContext* context, const ::netput::internal::EventRequest& request, ::netput::internal::EventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::netput::internal::EventRequest, ::netput::internal::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Event_, context, request, response);
}

void Netput::Stub::async::Event(::grpc::ClientContext* context, const ::netput::internal::EventRequest* request, ::netput::internal::EventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::netput::internal::EventRequest, ::netput::internal::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Event_, context, request, response, std::move(f));
}

void Netput::Stub::async::Event(::grpc::ClientContext* context, const ::netput::internal::EventRequest* request, ::netput::internal::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Event_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::netput::internal::EventResponse>* Netput::Stub::PrepareAsyncEventRaw(::grpc::ClientContext* context, const ::netput::internal::EventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::netput::internal::EventResponse, ::netput::internal::EventRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Event_, context, request);
}

::grpc::ClientAsyncResponseReader< ::netput::internal::EventResponse>* Netput::Stub::AsyncEventRaw(::grpc::ClientContext* context, const ::netput::internal::EventRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

Netput::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Netput_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Netput::Service, ::netput::internal::ConnectRequest, ::netput::internal::ConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Netput::Service* service,
             ::grpc::ServerContext* ctx,
             const ::netput::internal::ConnectRequest* req,
             ::netput::internal::ConnectResponse* resp) {
               return service->Connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Netput_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Netput::Service, ::netput::internal::DisconnectRequest, ::netput::internal::DisconnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Netput::Service* service,
             ::grpc::ServerContext* ctx,
             const ::netput::internal::DisconnectRequest* req,
             ::netput::internal::DisconnectResponse* resp) {
               return service->Disconnect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Netput_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Netput::Service, ::netput::internal::EventRequest, ::netput::internal::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Netput::Service* service,
             ::grpc::ServerContext* ctx,
             const ::netput::internal::EventRequest* req,
             ::netput::internal::EventResponse* resp) {
               return service->Event(ctx, req, resp);
             }, this)));
}

Netput::Service::~Service() {
}

::grpc::Status Netput::Service::Connect(::grpc::ServerContext* context, const ::netput::internal::ConnectRequest* request, ::netput::internal::ConnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Netput::Service::Disconnect(::grpc::ServerContext* context, const ::netput::internal::DisconnectRequest* request, ::netput::internal::DisconnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Netput::Service::Event(::grpc::ServerContext* context, const ::netput::internal::EventRequest* request, ::netput::internal::EventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace netput
}  // namespace internal

