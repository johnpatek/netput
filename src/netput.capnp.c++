// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: netput.capnp

#include "netput.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<49> b_fa4a1bc90f7e051b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     27,   5, 126,  15, 201,  27,  74, 250,
     13,   0,   0,   0,   3,   0,   0,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 199,   0,   0,   0,
    149,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  78, 101, 116,
    112, 117, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172, 153, 217, 123,  77, 228, 235, 175,
     32,  49, 171,  13, 178, 138, 226, 205,
     81,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9, 162, 235, 121,  59,  28, 224, 176,
    165, 241,   0, 245,  64, 157, 221, 184,
     57,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     30, 215,  99,  97,  65,  62,   5, 145,
    167,  25,  96, 102, 114, 249, 196, 241,
     33,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
     99, 111, 110, 110, 101,  99, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    112, 117, 115, 104,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 105, 115,  99, 111, 110, 110, 101,
     99, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_fa4a1bc90f7e051b = b_fa4a1bc90f7e051b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fa4a1bc90f7e051b[] = {
  &s_91053e416163d71e,
  &s_afebe44d7bd999ac,
  &s_b0e01c3b79eba209,
  &s_b8dd9d40f500f1a5,
  &s_cde28ab20dab3120,
  &s_f1c4f972666019a7,
};
static const uint16_t m_fa4a1bc90f7e051b[] = {0, 2, 1};
const ::capnp::_::RawSchema s_fa4a1bc90f7e051b = {
  0xfa4a1bc90f7e051b, b_fa4a1bc90f7e051b.words, 49, d_fa4a1bc90f7e051b, m_fa4a1bc90f7e051b,
  6, 3, nullptr, nullptr, nullptr, { &s_fa4a1bc90f7e051b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_afebe44d7bd999ac = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    172, 153, 217, 123,  77, 228, 235, 175,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  78, 101, 116,
    112, 117, 116,  46,  99, 111, 110, 110,
    101,  99, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    252, 156, 169,  51, 140,  93, 237, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_afebe44d7bd999ac = b_afebe44d7bd999ac.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_afebe44d7bd999ac[] = {
  &s_b2ed5d8c33a99cfc,
};
static const uint16_t m_afebe44d7bd999ac[] = {0};
static const uint16_t i_afebe44d7bd999ac[] = {0};
const ::capnp::_::RawSchema s_afebe44d7bd999ac = {
  0xafebe44d7bd999ac, b_afebe44d7bd999ac.words, 33, d_afebe44d7bd999ac, m_afebe44d7bd999ac,
  1, 1, i_afebe44d7bd999ac, nullptr, nullptr, { &s_afebe44d7bd999ac, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_cde28ab20dab3120 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     32,  49, 171,  13, 178, 138, 226, 205,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  78, 101, 116,
    112, 117, 116,  46,  99, 111, 110, 110,
    101,  99, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    203,  86, 121, 212, 138,  96, 219, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cde28ab20dab3120 = b_cde28ab20dab3120.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cde28ab20dab3120[] = {
  &s_e8db608ad47956cb,
};
static const uint16_t m_cde28ab20dab3120[] = {0};
static const uint16_t i_cde28ab20dab3120[] = {0};
const ::capnp::_::RawSchema s_cde28ab20dab3120 = {
  0xcde28ab20dab3120, b_cde28ab20dab3120.words, 34, d_cde28ab20dab3120, m_cde28ab20dab3120,
  1, 1, i_cde28ab20dab3120, nullptr, nullptr, { &s_cde28ab20dab3120, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_b0e01c3b79eba209 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      9, 162, 235, 121,  59,  28, 224, 176,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  78, 101, 116,
    112, 117, 116,  46, 112, 117, 115, 104,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 118, 101, 110, 116,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     27, 162, 196,  21,   0,  63,  71, 240,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b0e01c3b79eba209 = b_b0e01c3b79eba209.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b0e01c3b79eba209[] = {
  &s_f0473f0015c4a21b,
};
static const uint16_t m_b0e01c3b79eba209[] = {0};
static const uint16_t i_b0e01c3b79eba209[] = {0};
const ::capnp::_::RawSchema s_b0e01c3b79eba209 = {
  0xb0e01c3b79eba209, b_b0e01c3b79eba209.words, 32, d_b0e01c3b79eba209, m_b0e01c3b79eba209,
  1, 1, i_b0e01c3b79eba209, nullptr, nullptr, { &s_b0e01c3b79eba209, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_b8dd9d40f500f1a5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    165, 241,   0, 245,  64, 157, 221, 184,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  78, 101, 116,
    112, 117, 116,  46, 112, 117, 115, 104,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b8dd9d40f500f1a5 = b_b8dd9d40f500f1a5.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b8dd9d40f500f1a5 = {
  0xb8dd9d40f500f1a5, b_b8dd9d40f500f1a5.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b8dd9d40f500f1a5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_91053e416163d71e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     30, 215,  99,  97,  65,  62,   5, 145,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  78, 101, 116,
    112, 117, 116,  46, 100, 105, 115,  99,
    111, 110, 110, 101,  99, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     87,  97, 203, 230,  62,  85,  66, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_91053e416163d71e = b_91053e416163d71e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_91053e416163d71e[] = {
  &s_a542553ee6cb6157,
};
static const uint16_t m_91053e416163d71e[] = {0};
static const uint16_t i_91053e416163d71e[] = {0};
const ::capnp::_::RawSchema s_91053e416163d71e = {
  0x91053e416163d71e, b_91053e416163d71e.words, 33, d_91053e416163d71e, m_91053e416163d71e,
  1, 1, i_91053e416163d71e, nullptr, nullptr, { &s_91053e416163d71e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f1c4f972666019a7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    167,  25,  96, 102, 114, 249, 196, 241,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  78, 101, 116,
    112, 117, 116,  46, 100, 105, 115,  99,
    111, 110, 110, 101,  99, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    205, 185,  11, 130,  63, 105, 125, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f1c4f972666019a7 = b_f1c4f972666019a7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f1c4f972666019a7[] = {
  &s_977d693f820bb9cd,
};
static const uint16_t m_f1c4f972666019a7[] = {0};
static const uint16_t i_f1c4f972666019a7[] = {0};
const ::capnp::_::RawSchema s_f1c4f972666019a7 = {
  0xf1c4f972666019a7, b_f1c4f972666019a7.words, 34, d_f1c4f972666019a7, m_f1c4f972666019a7,
  1, 1, i_f1c4f972666019a7, nullptr, nullptr, { &s_f1c4f972666019a7, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b2ed5d8c33a99cfc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    252, 156, 169,  51, 140,  93, 237, 178,
     13,   0,   0,   0,   1,   0,   0,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  67, 111, 110,
    110, 101,  99, 116,  82, 101, 113, 117,
    101, 115, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101, 114,  68,  97, 116,  97,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b2ed5d8c33a99cfc = b_b2ed5d8c33a99cfc.words;
#if !CAPNP_LITE
static const uint16_t m_b2ed5d8c33a99cfc[] = {0};
static const uint16_t i_b2ed5d8c33a99cfc[] = {0};
const ::capnp::_::RawSchema s_b2ed5d8c33a99cfc = {
  0xb2ed5d8c33a99cfc, b_b2ed5d8c33a99cfc.words, 34, nullptr, m_b2ed5d8c33a99cfc,
  0, 1, i_b2ed5d8c33a99cfc, nullptr, nullptr, { &s_b2ed5d8c33a99cfc, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<26> b_e8db608ad47956cb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    203,  86, 121, 212, 138,  96, 219, 232,
     13,   0,   0,   0,   1,   0,   1,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  67, 111, 110,
    110, 101,  99, 116,  82, 101, 115, 112,
    111, 110, 115, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     51, 218,  75,  68,  98, 253, 150, 186,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 115, 115,  97, 103, 101,   0, }
};
::capnp::word const* const bp_e8db608ad47956cb = b_e8db608ad47956cb.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e8db608ad47956cb[] = {
  &s_ba96fd62444bda33,
};
static const uint16_t m_e8db608ad47956cb[] = {0};
static const uint16_t i_e8db608ad47956cb[] = {0};
const ::capnp::_::RawSchema s_e8db608ad47956cb = {
  0xe8db608ad47956cb, b_e8db608ad47956cb.words, 26, d_e8db608ad47956cb, m_e8db608ad47956cb,
  1, 1, i_e8db608ad47956cb, nullptr, nullptr, { &s_e8db608ad47956cb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_ba96fd62444bda33 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     51, 218,  75,  68,  98, 253, 150, 186,
     29,   0,   0,   0,   1,   0,   1,   0,
    203,  86, 121, 212, 138,  96, 219, 232,
      1,   0,   7,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  67, 111, 110,
    110, 101,  99, 116,  82, 101, 115, 112,
    111, 110, 115, 101,  46, 109, 101, 115,
    115,  97, 103, 101,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 115, 115, 105, 111, 110,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ba96fd62444bda33 = b_ba96fd62444bda33.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ba96fd62444bda33[] = {
  &s_e8db608ad47956cb,
};
static const uint16_t m_ba96fd62444bda33[] = {1, 0};
static const uint16_t i_ba96fd62444bda33[] = {0, 1};
const ::capnp::_::RawSchema s_ba96fd62444bda33 = {
  0xba96fd62444bda33, b_ba96fd62444bda33.words, 49, d_ba96fd62444bda33, m_ba96fd62444bda33,
  1, 2, i_ba96fd62444bda33, nullptr, nullptr, { &s_ba96fd62444bda33, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a542553ee6cb6157 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     87,  97, 203, 230,  62,  85,  66, 165,
     13,   0,   0,   0,   1,   0,   0,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  68, 105, 115,
     99, 111, 110, 110, 101,  99, 116,  82,
    101, 113, 117, 101, 115, 116,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 115, 115, 105, 111, 110,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a542553ee6cb6157 = b_a542553ee6cb6157.words;
#if !CAPNP_LITE
static const uint16_t m_a542553ee6cb6157[] = {0};
static const uint16_t i_a542553ee6cb6157[] = {0};
const ::capnp::_::RawSchema s_a542553ee6cb6157 = {
  0xa542553ee6cb6157, b_a542553ee6cb6157.words, 34, nullptr, m_a542553ee6cb6157,
  0, 1, i_a542553ee6cb6157, nullptr, nullptr, { &s_a542553ee6cb6157, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_977d693f820bb9cd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    205, 185,  11, 130,  63, 105, 125, 151,
     13,   0,   0,   0,   1,   0,   0,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  68, 105, 115,
     99, 111, 110, 110, 101,  99, 116,  82,
    101, 115, 112, 111, 110, 115, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_977d693f820bb9cd = b_977d693f820bb9cd.words;
#if !CAPNP_LITE
static const uint16_t m_977d693f820bb9cd[] = {0};
static const uint16_t i_977d693f820bb9cd[] = {0};
const ::capnp::_::RawSchema s_977d693f820bb9cd = {
  0x977d693f820bb9cd, b_977d693f820bb9cd.words, 33, nullptr, m_977d693f820bb9cd,
  0, 1, i_977d693f820bb9cd, nullptr, nullptr, { &s_977d693f820bb9cd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<41> b_f0473f0015c4a21b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     27, 162, 196,  21,   0,  63,  71, 240,
     13,   0,   0,   0,   1,   0,   1,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  69, 118, 101,
    110, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    136,  63, 115,  42,   5, 206, 243, 254,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 115, 115, 105, 111, 110,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 102, 111,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f0473f0015c4a21b = b_f0473f0015c4a21b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f0473f0015c4a21b[] = {
  &s_fef3ce052a733f88,
};
static const uint16_t m_f0473f0015c4a21b[] = {1, 0};
static const uint16_t i_f0473f0015c4a21b[] = {0, 1};
const ::capnp::_::RawSchema s_f0473f0015c4a21b = {
  0xf0473f0015c4a21b, b_f0473f0015c4a21b.words, 41, d_f0473f0015c4a21b, m_f0473f0015c4a21b,
  1, 2, i_f0473f0015c4a21b, nullptr, nullptr, { &s_f0473f0015c4a21b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<95> b_fef3ce052a733f88 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    136,  63, 115,  42,   5, 206, 243, 254,
     19,   0,   0,   0,   1,   0,   1,   0,
     27, 162, 196,  21,   0,  63,  71, 240,
      2,   0,   7,   0,   1,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  69, 118, 101,
    110, 116,  46, 105, 110, 102, 111,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      4,   0, 251, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   0,   0,   0,   3,   0,   1,   0,
    164,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 117, 115, 101,  77, 111, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     48,  61, 112, 226,  77, 219, 233, 149,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 117, 115, 101,  66, 117, 116,
    116, 111, 110,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    137,  42, 163, 136, 156, 217,  42, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 117, 115, 101,  87, 104, 101,
    101, 108,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    137, 220, 238,  73,  24,  20, 200, 176,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    107, 101, 121,  98, 111,  97, 114, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    190, 196, 222, 109, 190,  42, 219, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 105, 110, 100, 111, 119,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     51, 104,  86,  96, 250, 118, 249, 147,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fef3ce052a733f88 = b_fef3ce052a733f88.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fef3ce052a733f88[] = {
  &s_93f976fa60566833,
  &s_95e9db4de2703d30,
  &s_b0c8141849eedc89,
  &s_db2ad99c88a32a89,
  &s_e8db2abe6ddec4be,
  &s_f0473f0015c4a21b,
};
static const uint16_t m_fef3ce052a733f88[] = {3, 1, 0, 2, 4};
static const uint16_t i_fef3ce052a733f88[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_fef3ce052a733f88 = {
  0xfef3ce052a733f88, b_fef3ce052a733f88.words, 95, d_fef3ce052a733f88, m_fef3ce052a733f88,
  6, 5, i_fef3ce052a733f88, nullptr, nullptr, { &s_fef3ce052a733f88, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<26> b_cdd23f44c925b297 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    151, 178,  37, 201,  68,  63, 210, 205,
     13,   0,   0,   0,   2,   0,   0,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  73, 110, 112,
    117, 116,  83, 116,  97, 116, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 108, 101,  97, 115, 101, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 101, 115, 115, 101, 100,   0, }
};
::capnp::word const* const bp_cdd23f44c925b297 = b_cdd23f44c925b297.words;
#if !CAPNP_LITE
static const uint16_t m_cdd23f44c925b297[] = {1, 0};
const ::capnp::_::RawSchema s_cdd23f44c925b297 = {
  0xcdd23f44c925b297, b_cdd23f44c925b297.words, 26, nullptr, m_cdd23f44c925b297,
  0, 2, nullptr, nullptr, nullptr, { &s_cdd23f44c925b297, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(InputState_cdd23f44c925b297, cdd23f44c925b297);
static const ::capnp::_::AlignedData<38> b_83b374bc3dd69907 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      7, 153, 214,  61, 188, 116, 179, 131,
     13,   0,   0,   0,   2,   0,   0,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 127,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  77, 111, 117,
    115, 101,  66, 117, 116, 116, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 101, 102, 116,   0,   0,   0,   0,
    109, 105, 100, 100, 108, 101,   0,   0,
    114, 105, 103, 104, 116,   0,   0,   0,
    120,  49,   0,   0,   0,   0,   0,   0,
    120,  50,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_83b374bc3dd69907 = b_83b374bc3dd69907.words;
#if !CAPNP_LITE
static const uint16_t m_83b374bc3dd69907[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_83b374bc3dd69907 = {
  0x83b374bc3dd69907, b_83b374bc3dd69907.words, 38, nullptr, m_83b374bc3dd69907,
  0, 5, nullptr, nullptr, nullptr, { &s_83b374bc3dd69907, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(MouseButton_83b374bc3dd69907, 83b374bc3dd69907);
static const ::capnp::_::AlignedData<78> b_aae0ea937045b314 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     20, 179,  69, 112, 147, 234, 224, 170,
     13,   0,   0,   0,   2,   0,   0,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  39,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  87, 105, 110,
    100, 111, 119,  69, 118, 101, 110, 116,
     84, 121, 112, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     48,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 104, 111, 119, 110,  84, 121, 112,
    101,   0,   0,   0,   0,   0,   0,   0,
    104, 105, 100, 100, 101, 110,  84, 121,
    112, 101,   0,   0,   0,   0,   0,   0,
    101, 120, 112, 111, 115, 101, 100,  84,
    121, 112, 101,   0,   0,   0,   0,   0,
    109, 111, 118, 101, 100,  84, 121, 112,
    101,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 105, 122, 101, 100,  84,
    121, 112, 101,   0,   0,   0,   0,   0,
    109, 105, 110, 105, 109, 105, 122, 101,
    100,  84, 121, 112, 101,   0,   0,   0,
    109,  97, 120, 105, 109, 105, 122, 101,
    100,  84, 121, 112, 101,   0,   0,   0,
    114, 101, 115, 116, 111, 114, 101, 100,
     84, 121, 112, 101,   0,   0,   0,   0,
    109, 111, 117, 115, 101,  69, 110, 116,
    101, 114,  84, 121, 112, 101,   0,   0,
    109, 111, 117, 115, 101,  76, 101,  97,
    118, 101,  84, 121, 112, 101,   0,   0,
    102, 111,  99, 117, 115,  71,  97, 105,
    110, 101, 100,  84, 121, 112, 101,   0,
    102, 111,  99, 117, 115,  76, 111, 115,
    116,  84, 121, 112, 101,   0,   0,   0, }
};
::capnp::word const* const bp_aae0ea937045b314 = b_aae0ea937045b314.words;
#if !CAPNP_LITE
static const uint16_t m_aae0ea937045b314[] = {2, 10, 11, 1, 6, 5, 8, 9, 3, 4, 7, 0};
const ::capnp::_::RawSchema s_aae0ea937045b314 = {
  0xaae0ea937045b314, b_aae0ea937045b314.words, 78, nullptr, m_aae0ea937045b314,
  0, 12, nullptr, nullptr, nullptr, { &s_aae0ea937045b314, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(WindowEventType_aae0ea937045b314, aae0ea937045b314);
static const ::capnp::_::AlignedData<132> b_95e9db4de2703d30 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     48,  61, 112, 226,  77, 219, 233, 149,
     13,   0,   0,   0,   1,   0,   4,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 143,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  77, 111, 117,
    115, 101,  77, 111, 116, 105, 111, 110,
     69, 118, 101, 110, 116,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     68,  23,  36, 140, 120,  21, 182, 219,
      1,   0,   0,   0, 122,   0,   0,   0,
     77, 111, 117, 115, 101,  83, 116,  97,
    116, 101,  77,  97, 115, 107,   0,   0,
     28,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,   0,   0,   0,   3,   0,   1,   0,
    192,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    188,   0,   0,   0,   3,   0,   1,   0,
    200,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    197,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   0,   0,   0,   3,   0,   1,   0,
    208,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    200,   0,   0,   0,   3,   0,   1,   0,
    212,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    204,   0,   0,   0,   3,   0,   1,   0,
    216,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    212,   0,   0,   0,   3,   0,   1,   0,
    224,   0,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    221,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    220,   0,   0,   0,   3,   0,   1,   0,
    232,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101, 115, 116,  97, 109,
    112,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 105, 110, 100, 111, 119,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 116, 101,  77,  97, 115,
    107,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     68,  23,  36, 140, 120,  21, 182, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 108,  97, 116, 105, 118, 101,
     88,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 108,  97, 116, 105, 118, 101,
     89,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_95e9db4de2703d30 = b_95e9db4de2703d30.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_95e9db4de2703d30[] = {
  &s_dbb615788c241744,
};
static const uint16_t m_95e9db4de2703d30[] = {5, 6, 2, 0, 1, 3, 4};
static const uint16_t i_95e9db4de2703d30[] = {0, 1, 2, 3, 4, 5, 6};
const ::capnp::_::RawSchema s_95e9db4de2703d30 = {
  0x95e9db4de2703d30, b_95e9db4de2703d30.words, 132, d_95e9db4de2703d30, m_95e9db4de2703d30,
  1, 7, i_95e9db4de2703d30, nullptr, nullptr, { &s_95e9db4de2703d30, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<95> b_dbb615788c241744 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68,  23,  36, 140, 120,  21, 182, 219,
     30,   0,   0,   0,   1,   0,   2,   0,
     48,  61, 112, 226,  77, 219, 233, 149,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  77, 111, 117,
    115, 101,  77, 111, 116, 105, 111, 110,
     69, 118, 101, 110, 116,  46,  77, 111,
    117, 115, 101,  83, 116,  97, 116, 101,
     77,  97, 115, 107,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
    108, 101, 102, 116,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    151, 178,  37, 201,  68,  63, 210, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 105, 100, 100, 108, 101,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    151, 178,  37, 201,  68,  63, 210, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 105, 103, 104, 116,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    151, 178,  37, 201,  68,  63, 210, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  49,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    151, 178,  37, 201,  68,  63, 210, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  50,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    151, 178,  37, 201,  68,  63, 210, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dbb615788c241744 = b_dbb615788c241744.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dbb615788c241744[] = {
  &s_cdd23f44c925b297,
};
static const uint16_t m_dbb615788c241744[] = {0, 1, 2, 3, 4};
static const uint16_t i_dbb615788c241744[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_dbb615788c241744 = {
  0xdbb615788c241744, b_dbb615788c241744.words, 95, d_dbb615788c241744, m_dbb615788c241744,
  1, 5, i_dbb615788c241744, nullptr, nullptr, { &s_dbb615788c241744, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<125> b_db2ad99c88a32a89 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    137,  42, 163, 136, 156, 217,  42, 219,
     13,   0,   0,   0,   1,   0,   4,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 143,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  77, 111, 117,
    115, 101,  66, 117, 116, 116, 111, 110,
     69, 118, 101, 110, 116,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     28,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,   0,   0,   0,   3,   0,   1,   0,
    192,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    188,   0,   0,   0,   3,   0,   1,   0,
    200,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    197,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    192,   0,   0,   0,   3,   0,   1,   0,
    204,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   0,   0,   0,   3,   0,   1,   0,
    208,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0, 128,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    200,   0,   0,   0,   3,   0,   1,   0,
    212,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    204,   0,   0,   0,   3,   0,   1,   0,
    216,   0,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    208,   0,   0,   0,   3,   0,   1,   0,
    220,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101, 115, 116,  97, 109,
    112,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 105, 110, 100, 111, 119,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 117, 116, 116, 111, 110,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      7, 153, 214,  61, 188, 116, 179, 131,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 116, 101,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    151, 178,  37, 201,  68,  63, 210, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 111, 117,  98, 108, 101,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_db2ad99c88a32a89 = b_db2ad99c88a32a89.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_db2ad99c88a32a89[] = {
  &s_83b374bc3dd69907,
  &s_cdd23f44c925b297,
};
static const uint16_t m_db2ad99c88a32a89[] = {2, 4, 3, 0, 1, 5, 6};
static const uint16_t i_db2ad99c88a32a89[] = {0, 1, 2, 3, 4, 5, 6};
const ::capnp::_::RawSchema s_db2ad99c88a32a89 = {
  0xdb2ad99c88a32a89, b_db2ad99c88a32a89.words, 125, d_db2ad99c88a32a89, m_db2ad99c88a32a89,
  2, 7, i_db2ad99c88a32a89, nullptr, nullptr, { &s_db2ad99c88a32a89, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<112> b_b0c8141849eedc89 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    137, 220, 238,  73,  24,  20, 200, 176,
     13,   0,   0,   0,   1,   0,   4,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  77, 111, 117,
    115, 101,  87, 104, 101, 101, 108,  69,
    118, 101, 110, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   0,   0,   0,   3,   0,   1,   0,
    164,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    176,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    180,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    188,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    184,   0,   0,   0,   3,   0,   1,   0,
    196,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101, 115, 116,  97, 109,
    112,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 105, 110, 100, 111, 119,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 101,  99, 105, 115, 101,  88,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 101,  99, 105, 115, 101,  89,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b0c8141849eedc89 = b_b0c8141849eedc89.words;
#if !CAPNP_LITE
static const uint16_t m_b0c8141849eedc89[] = {4, 5, 0, 1, 2, 3};
static const uint16_t i_b0c8141849eedc89[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_b0c8141849eedc89 = {
  0xb0c8141849eedc89, b_b0c8141849eedc89.words, 112, nullptr, m_b0c8141849eedc89,
  0, 6, i_b0c8141849eedc89, nullptr, nullptr, { &s_b0c8141849eedc89, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<95> b_e8db2abe6ddec4be = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190, 196, 222, 109, 190,  42, 219, 232,
     13,   0,   0,   0,   1,   0,   3,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  75, 101, 121,
     98, 111,  97, 114, 100,  69, 118, 101,
    110, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0, 112,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    144,   0,   0,   0,   3,   0,   1,   0,
    156,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101, 115, 116,  97, 109,
    112,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 105, 110, 100, 111, 119,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 116, 101,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    151, 178,  37, 201,  68,  63, 210, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 112, 101,  97, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    107, 101, 121,  67, 111, 100, 101,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8db2abe6ddec4be = b_e8db2abe6ddec4be.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e8db2abe6ddec4be[] = {
  &s_cdd23f44c925b297,
};
static const uint16_t m_e8db2abe6ddec4be[] = {4, 3, 2, 0, 1};
static const uint16_t i_e8db2abe6ddec4be[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_e8db2abe6ddec4be = {
  0xe8db2abe6ddec4be, b_e8db2abe6ddec4be.words, 95, d_e8db2abe6ddec4be, m_e8db2abe6ddec4be,
  1, 5, i_e8db2abe6ddec4be, nullptr, nullptr, { &s_e8db2abe6ddec4be, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<95> b_93f976fa60566833 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     51, 104,  86,  96, 250, 118, 249, 147,
     13,   0,   0,   0,   1,   0,   3,   0,
     79, 101,  81, 227, 209, 112, 242, 149,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 112, 117, 116,  46,  99,
     97, 112, 110, 112,  58,  87, 105, 110,
    100, 111, 119,  69, 118, 101, 110, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    144,   0,   0,   0,   3,   0,   1,   0,
    156,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101, 115, 116,  97, 109,
    112,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 105, 110, 100, 111, 119,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     20, 179,  69, 112, 147, 234, 224, 170,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 114, 103,  49,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 114, 103,  50,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_93f976fa60566833 = b_93f976fa60566833.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_93f976fa60566833[] = {
  &s_aae0ea937045b314,
};
static const uint16_t m_93f976fa60566833[] = {3, 4, 0, 2, 1};
static const uint16_t i_93f976fa60566833[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_93f976fa60566833 = {
  0x93f976fa60566833, b_93f976fa60566833.words, 95, d_93f976fa60566833, m_93f976fa60566833,
  1, 5, i_93f976fa60566833, nullptr, nullptr, { &s_93f976fa60566833, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace netput {
namespace rpc {

#if !CAPNP_LITE
::capnp::Request< ::netput::rpc::Netput::ConnectParams,  ::netput::rpc::Netput::ConnectResults>
Netput::Client::connectRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::netput::rpc::Netput::ConnectParams,  ::netput::rpc::Netput::ConnectResults>(
      0xfa4a1bc90f7e051bull, 0, sizeHint, {true});
}
::kj::Promise<void> Netput::Server::connect(ConnectContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "netput.capnp:Netput", "connect",
      0xfa4a1bc90f7e051bull, 0);
}
::capnp::Request< ::netput::rpc::Netput::PushParams,  ::netput::rpc::Netput::PushResults>
Netput::Client::pushRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::netput::rpc::Netput::PushParams,  ::netput::rpc::Netput::PushResults>(
      0xfa4a1bc90f7e051bull, 1, sizeHint, {true});
}
::kj::Promise<void> Netput::Server::push(PushContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "netput.capnp:Netput", "push",
      0xfa4a1bc90f7e051bull, 1);
}
::capnp::Request< ::netput::rpc::Netput::DisconnectParams,  ::netput::rpc::Netput::DisconnectResults>
Netput::Client::disconnectRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::netput::rpc::Netput::DisconnectParams,  ::netput::rpc::Netput::DisconnectResults>(
      0xfa4a1bc90f7e051bull, 2, sizeHint, {true});
}
::kj::Promise<void> Netput::Server::disconnect(DisconnectContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "netput.capnp:Netput", "disconnect",
      0xfa4a1bc90f7e051bull, 2);
}
::capnp::Capability::Server::DispatchCallResult Netput::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xfa4a1bc90f7e051bull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("netput.capnp:Netput", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Netput::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        connect(::capnp::Capability::Server::internalGetTypedContext<
             ::netput::rpc::Netput::ConnectParams,  ::netput::rpc::Netput::ConnectResults>(context)),
        false,
        false
      };
    case 1:
      return {
        push(::capnp::Capability::Server::internalGetTypedContext<
             ::netput::rpc::Netput::PushParams,  ::netput::rpc::Netput::PushResults>(context)),
        false,
        false
      };
    case 2:
      return {
        disconnect(::capnp::Capability::Server::internalGetTypedContext<
             ::netput::rpc::Netput::DisconnectParams,  ::netput::rpc::Netput::DisconnectResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "netput.capnp:Netput",
          0xfa4a1bc90f7e051bull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Netput
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Netput::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Netput::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Netput::ConnectParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Netput::ConnectParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Netput::ConnectParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Netput::ConnectParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Netput::ConnectParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Netput::ConnectResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Netput::ConnectResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Netput::ConnectResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Netput::ConnectResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Netput::ConnectResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Netput::PushParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Netput::PushParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Netput::PushParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Netput::PushParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Netput::PushParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Netput::PushResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Netput::PushResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Netput::PushResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Netput::PushResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Netput::PushResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Netput::DisconnectParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Netput::DisconnectParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Netput::DisconnectParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Netput::DisconnectParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Netput::DisconnectParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Netput::DisconnectResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Netput::DisconnectResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Netput::DisconnectResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Netput::DisconnectResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Netput::DisconnectResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ConnectRequest
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ConnectRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t ConnectRequest::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ConnectRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ConnectRequest::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ConnectResponse
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ConnectResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t ConnectResponse::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ConnectResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ConnectResponse::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ConnectResponse::Message
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ConnectResponse::Message::_capnpPrivate::dataWordSize;
constexpr uint16_t ConnectResponse::Message::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ConnectResponse::Message::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ConnectResponse::Message::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// DisconnectRequest
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t DisconnectRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t DisconnectRequest::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind DisconnectRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* DisconnectRequest::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// DisconnectResponse
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t DisconnectResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t DisconnectResponse::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind DisconnectResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* DisconnectResponse::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Event
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Event::_capnpPrivate::dataWordSize;
constexpr uint16_t Event::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Event::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Event::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Event::Info
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Event::Info::_capnpPrivate::dataWordSize;
constexpr uint16_t Event::Info::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Event::Info::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Event::Info::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MouseMotionEvent
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MouseMotionEvent::_capnpPrivate::dataWordSize;
constexpr uint16_t MouseMotionEvent::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MouseMotionEvent::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MouseMotionEvent::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MouseMotionEvent::MouseStateMask
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MouseMotionEvent::MouseStateMask::_capnpPrivate::dataWordSize;
constexpr uint16_t MouseMotionEvent::MouseStateMask::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MouseMotionEvent::MouseStateMask::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MouseMotionEvent::MouseStateMask::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MouseButtonEvent
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MouseButtonEvent::_capnpPrivate::dataWordSize;
constexpr uint16_t MouseButtonEvent::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MouseButtonEvent::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MouseButtonEvent::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MouseWheelEvent
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MouseWheelEvent::_capnpPrivate::dataWordSize;
constexpr uint16_t MouseWheelEvent::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MouseWheelEvent::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MouseWheelEvent::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// KeyboardEvent
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t KeyboardEvent::_capnpPrivate::dataWordSize;
constexpr uint16_t KeyboardEvent::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind KeyboardEvent::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* KeyboardEvent::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// WindowEvent
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t WindowEvent::_capnpPrivate::dataWordSize;
constexpr uint16_t WindowEvent::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind WindowEvent::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* WindowEvent::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

